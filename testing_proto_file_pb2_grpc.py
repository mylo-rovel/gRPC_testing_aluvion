# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import testing_proto_file_pb2 as testing__proto__file__pb2


class TestingRpcFeaturesStub(object):
    """option java_multiple_files = true;
    option java_package = "io.grpc.examples.routeguide";
    option java_outer_classname = "RouteGuideProto";
    option objc_class_prefix = "RTG";

    package routeguide;

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CurrentTime = channel.unary_unary(
                '/TestingRpcFeatures/CurrentTime',
                request_serializer=testing__proto__file__pb2.TextMessage.SerializeToString,
                response_deserializer=testing__proto__file__pb2.TimeStructure.FromString,
                )
        self.GenRandomNumbersStream = channel.unary_stream(
                '/TestingRpcFeatures/GenRandomNumbersStream',
                request_serializer=testing__proto__file__pb2.NumberGenParams.SerializeToString,
                response_deserializer=testing__proto__file__pb2.RealNumber.FromString,
                )
        self.SumOfStreamNumbers = channel.stream_unary(
                '/TestingRpcFeatures/SumOfStreamNumbers',
                request_serializer=testing__proto__file__pb2.RealNumber.SerializeToString,
                response_deserializer=testing__proto__file__pb2.RealNumber.FromString,
                )
        self.TransformWordsToNumbers = channel.stream_stream(
                '/TestingRpcFeatures/TransformWordsToNumbers',
                request_serializer=testing__proto__file__pb2.TextMessage.SerializeToString,
                response_deserializer=testing__proto__file__pb2.RealNumber.FromString,
                )


class TestingRpcFeaturesServicer(object):
    """option java_multiple_files = true;
    option java_package = "io.grpc.examples.routeguide";
    option java_outer_classname = "RouteGuideProto";
    option objc_class_prefix = "RTG";

    package routeguide;

    """

    def CurrentTime(self, request, context):
        """Testing simple RPC req, res
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenRandomNumbersStream(self, request, context):
        """Testing stream type response from server
        client will send some params of a number generation and server will respond with
        a stream of generated numbers
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SumOfStreamNumbers(self, request_iterator, context):
        """Testing stream type request from client (or "stub")
        server will receive a stream of numbers and it will sum all them down to a var
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransformWordsToNumbers(self, request_iterator, context):
        """A Bidirectional streaming RPC.
        Testing stream type request and response
        client will send a number and server will transform it into a letter using module and a hash table
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TestingRpcFeaturesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CurrentTime': grpc.unary_unary_rpc_method_handler(
                    servicer.CurrentTime,
                    request_deserializer=testing__proto__file__pb2.TextMessage.FromString,
                    response_serializer=testing__proto__file__pb2.TimeStructure.SerializeToString,
            ),
            'GenRandomNumbersStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GenRandomNumbersStream,
                    request_deserializer=testing__proto__file__pb2.NumberGenParams.FromString,
                    response_serializer=testing__proto__file__pb2.RealNumber.SerializeToString,
            ),
            'SumOfStreamNumbers': grpc.stream_unary_rpc_method_handler(
                    servicer.SumOfStreamNumbers,
                    request_deserializer=testing__proto__file__pb2.RealNumber.FromString,
                    response_serializer=testing__proto__file__pb2.RealNumber.SerializeToString,
            ),
            'TransformWordsToNumbers': grpc.stream_stream_rpc_method_handler(
                    servicer.TransformWordsToNumbers,
                    request_deserializer=testing__proto__file__pb2.TextMessage.FromString,
                    response_serializer=testing__proto__file__pb2.RealNumber.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TestingRpcFeatures', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TestingRpcFeatures(object):
    """option java_multiple_files = true;
    option java_package = "io.grpc.examples.routeguide";
    option java_outer_classname = "RouteGuideProto";
    option objc_class_prefix = "RTG";

    package routeguide;

    """

    @staticmethod
    def CurrentTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TestingRpcFeatures/CurrentTime',
            testing__proto__file__pb2.TextMessage.SerializeToString,
            testing__proto__file__pb2.TimeStructure.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenRandomNumbersStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/TestingRpcFeatures/GenRandomNumbersStream',
            testing__proto__file__pb2.NumberGenParams.SerializeToString,
            testing__proto__file__pb2.RealNumber.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SumOfStreamNumbers(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/TestingRpcFeatures/SumOfStreamNumbers',
            testing__proto__file__pb2.RealNumber.SerializeToString,
            testing__proto__file__pb2.RealNumber.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TransformWordsToNumbers(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/TestingRpcFeatures/TransformWordsToNumbers',
            testing__proto__file__pb2.TextMessage.SerializeToString,
            testing__proto__file__pb2.RealNumber.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
